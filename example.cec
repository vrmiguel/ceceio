(/ (* 2 3) (- 5 6 7))
(def x 5)
(def twice (+ x x))
(= twice (* x 2) 10.0)
(= (* x x x x x) 3125.0)
(def ok (fn [] :ok))
(= (ok) :ok)
(def id (fn [x] x))
(= (id 2) 2)
(= (id :success) :success)
(def double (fn [x] (+ x x)))
(= (double 2) (* 4 1))
(def even? (fn [x] (= (% x 2) 0)))
(even? 2)
(even? 3)
(/ (* 2 3) (- 5 6 7))
(def x 5)
(def twice (+ x x))
(= twice (* x 2) 10.0)
(= (* x x x x x) 3125.0)
(def ok (fn [] :ok))
(= (ok) :ok)
(def id (fn [x] x))
(= (id 2) 2)
(= (id :success) :success)
(def double (fn [x] (+ x x)))
(= (double 2) (* 4 1))
(def even? (fn [x] (= (% x 2) 0)))
(even? 2)
(even? 3)
(def double-if-even (fn [x] (if (even? x) (* x 2))))
(double-if-even 4)
(/ (* 2 3) (- 5 6 7))
(def x 5)
(def twice (+ x x))
(= twice (* x 2) 10.0)
(= (* x x x x x) 3125.0)
(def ok (fn [] :ok))
(= (ok) :ok)
(def id (fn [x] x))
(= (id 2) 2)
(= (id :success) :success)
(def double (fn [x] (+ x x)))
(= (double 2) (* 4 1))
(def even? (fn [x] (= (% x 2) 0)))
(even? 2)
(even? 3)
